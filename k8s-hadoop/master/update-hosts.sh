#!/bin/bash

read -p "Enter the slave1 IP address: " slave1

# Get pod information and extract relevant details
pod_info=$(microk8s kubectl get pods -o wide --no-headers)

# Create or overwrite the hosts file
echo "# Hosts file generated by script" > hosts

# Loop through each line of the pod information
while IFS= read -r line; do
    # Extract pod name and IP address
    pod_name=$(echo "$line" | awk '{print $1}')
    # Extract the IP address from the sixth field
    ip_address=$(echo "$line" | awk '{print $6}')

    # Check if the IP address is valid
    if ! [[ "$ip_address" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # If not valid, use the IP address from the eighth field
        ip_address=$(echo "$line" | awk '{print $8}')
    fi

    # Extract the hostname (remove everything after the first hyphen)
    hostname=$(echo "$pod_name" | awk -F- '{print $1}')

    # Handle special case for nodemanager1
    if [ "$hostname" == "nodemanager1" ]; then
        hostname="nodemanager"
    fi

    # Append the entry to the hosts file
    echo "$ip_address $hostname" >> hosts
done <<< "$pod_info"
echo "$slave1 datanode1" >> hosts
# echo "$slave1 nodemanager1" >> hosts

# Get pod names
pod_names=$(microk8s kubectl get pods -o custom-columns=:metadata.name --no-headers)

# Loop through each pod and append the contents of the hosts file to /etc/hosts
while IFS= read -r pod_name; do
    # Copy the hosts file to a temporary directory inside the container
    microk8s kubectl cp hosts "$pod_name":/tmp/hosts

    # Append the contents of the hosts file to /etc/hosts inside the container
    microk8s kubectl exec "$pod_name" -- sh -c "cat /tmp/hosts >> /etc/hosts"

    # Remove the temporary hosts file
    microk8s kubectl exec "$pod_name" -- sh -c "rm /tmp/hosts"

    # Print a message for each successful append
    echo "Hosts file appended to /etc/hosts in $pod_name!"
done <<< "$pod_names"

echo "Hosts file appended to /etc/hosts in each container!"

microk8s kubectl port-forward service/namenode $(microk8s kubectl get service namenode -o=jsonpath='{.spec.ports[*].port}') --address 0.0.0.0 &
microk8s kubectl port-forward service/resourcemanager $(microk8s kubectl get service resourcemanager -o=jsonpath='{.spec.ports[*].port}') --address 0.0.0.0 &
microk8s kubectl port-forward service/historyserver $(microk8s kubectl get service historyserver -o=jsonpath='{.spec.ports[*].port}') --address 0.0.0.0 &

